// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/echo.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// EchoRequest is the request for echo.
type EchoRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4474e5548228dd3, []int{0}
}

func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRequest.Unmarshal(m, b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
}
func (m *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(m, src)
}
func (m *EchoRequest) XXX_Size() int {
	return xxx_messageInfo_EchoRequest.Size(m)
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// EchoResponse is the response for echo.
type EchoResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoResponse) Reset()         { *m = EchoResponse{} }
func (m *EchoResponse) String() string { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()    {}
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4474e5548228dd3, []int{1}
}

func (m *EchoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoResponse.Unmarshal(m, b)
}
func (m *EchoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoResponse.Marshal(b, m, deterministic)
}
func (m *EchoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoResponse.Merge(m, src)
}
func (m *EchoResponse) XXX_Size() int {
	return xxx_messageInfo_EchoResponse.Size(m)
}
func (m *EchoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EchoResponse proto.InternalMessageInfo

func (m *EchoResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "pb.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "pb.EchoResponse")
}

func init() { proto.RegisterFile("pb/echo.proto", fileDescriptor_c4474e5548228dd3) }

var fileDescriptor_c4474e5548228dd3 = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x48, 0xd2, 0x4f,
	0x4d, 0xce, 0xc8, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe7,
	0xe2, 0x76, 0x4d, 0xce, 0xc8, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe0, 0x62,
	0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71,
	0x95, 0x34, 0xb8, 0x78, 0x20, 0x0a, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x71, 0xab, 0x34, 0xb2,
	0xe0, 0x62, 0x01, 0xa9, 0x14, 0x32, 0xe0, 0xe2, 0x0c, 0xcd, 0x4b, 0x2c, 0xaa, 0x04, 0x73, 0xf8,
	0xf5, 0x0a, 0x92, 0xf4, 0x90, 0x6c, 0x92, 0x12, 0x40, 0x08, 0x40, 0x4c, 0x54, 0x62, 0x30, 0xba,
	0xc4, 0xc8, 0xc5, 0x1b, 0x5c, 0x52, 0x94, 0x9a, 0x98, 0x9b, 0x99, 0x97, 0x0e, 0xd6, 0x66, 0xc3,
	0x25, 0x1c, 0x9c, 0x5a, 0x54, 0x96, 0x5a, 0x84, 0x2a, 0x4c, 0x8c, 0x69, 0x06, 0x8c, 0x20, 0xdd,
	0xce, 0x39, 0x99, 0xa9, 0x79, 0x25, 0xa4, 0xeb, 0xd6, 0x60, 0x14, 0x72, 0xe5, 0x92, 0x72, 0xca,
	0x4c, 0xc9, 0x2c, 0x4a, 0x4d, 0x2e, 0xc9, 0xcc, 0xcf, 0x4b, 0xcc, 0x21, 0xc7, 0x10, 0x03, 0xc6,
	0x24, 0x36, 0x70, 0x60, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x24, 0x00, 0x92, 0x7d,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoClient interface {
	// UnaryEcho is unary echo.
	UnaryEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) UnaryEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/pb.Echo/UnaryEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServer is the server API for Echo service.
type EchoServer interface {
	// UnaryEcho is unary echo.
	UnaryEcho(context.Context, *EchoRequest) (*EchoResponse, error)
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_UnaryEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).UnaryEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Echo/UnaryEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).UnaryEcho(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryEcho",
			Handler:    _Echo_UnaryEcho_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/echo.proto",
}

// StreamingEchoClient is the client API for StreamingEcho service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamingEchoClient interface {
	// ServerStreamingEcho is server side streaming.
	ServerStreamingEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (StreamingEcho_ServerStreamingEchoClient, error)
	// ClientStreamingEcho is client side streaming.
	ClientStreamingEcho(ctx context.Context, opts ...grpc.CallOption) (StreamingEcho_ClientStreamingEchoClient, error)
	// BidirectionalStreamingEcho is bidi streaming.
	BidirectionalStreamingEcho(ctx context.Context, opts ...grpc.CallOption) (StreamingEcho_BidirectionalStreamingEchoClient, error)
}

type streamingEchoClient struct {
	cc *grpc.ClientConn
}

func NewStreamingEchoClient(cc *grpc.ClientConn) StreamingEchoClient {
	return &streamingEchoClient{cc}
}

func (c *streamingEchoClient) ServerStreamingEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (StreamingEcho_ServerStreamingEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamingEcho_serviceDesc.Streams[0], "/pb.StreamingEcho/ServerStreamingEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingEchoServerStreamingEchoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamingEcho_ServerStreamingEchoClient interface {
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type streamingEchoServerStreamingEchoClient struct {
	grpc.ClientStream
}

func (x *streamingEchoServerStreamingEchoClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingEchoClient) ClientStreamingEcho(ctx context.Context, opts ...grpc.CallOption) (StreamingEcho_ClientStreamingEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamingEcho_serviceDesc.Streams[1], "/pb.StreamingEcho/ClientStreamingEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingEchoClientStreamingEchoClient{stream}
	return x, nil
}

type StreamingEcho_ClientStreamingEchoClient interface {
	Send(*EchoRequest) error
	CloseAndRecv() (*EchoResponse, error)
	grpc.ClientStream
}

type streamingEchoClientStreamingEchoClient struct {
	grpc.ClientStream
}

func (x *streamingEchoClientStreamingEchoClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingEchoClientStreamingEchoClient) CloseAndRecv() (*EchoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingEchoClient) BidirectionalStreamingEcho(ctx context.Context, opts ...grpc.CallOption) (StreamingEcho_BidirectionalStreamingEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamingEcho_serviceDesc.Streams[2], "/pb.StreamingEcho/BidirectionalStreamingEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingEchoBidirectionalStreamingEchoClient{stream}
	return x, nil
}

type StreamingEcho_BidirectionalStreamingEchoClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type streamingEchoBidirectionalStreamingEchoClient struct {
	grpc.ClientStream
}

func (x *streamingEchoBidirectionalStreamingEchoClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingEchoBidirectionalStreamingEchoClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingEchoServer is the server API for StreamingEcho service.
type StreamingEchoServer interface {
	// ServerStreamingEcho is server side streaming.
	ServerStreamingEcho(*EchoRequest, StreamingEcho_ServerStreamingEchoServer) error
	// ClientStreamingEcho is client side streaming.
	ClientStreamingEcho(StreamingEcho_ClientStreamingEchoServer) error
	// BidirectionalStreamingEcho is bidi streaming.
	BidirectionalStreamingEcho(StreamingEcho_BidirectionalStreamingEchoServer) error
}

func RegisterStreamingEchoServer(s *grpc.Server, srv StreamingEchoServer) {
	s.RegisterService(&_StreamingEcho_serviceDesc, srv)
}

func _StreamingEcho_ServerStreamingEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingEchoServer).ServerStreamingEcho(m, &streamingEchoServerStreamingEchoServer{stream})
}

type StreamingEcho_ServerStreamingEchoServer interface {
	Send(*EchoResponse) error
	grpc.ServerStream
}

type streamingEchoServerStreamingEchoServer struct {
	grpc.ServerStream
}

func (x *streamingEchoServerStreamingEchoServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamingEcho_ClientStreamingEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingEchoServer).ClientStreamingEcho(&streamingEchoClientStreamingEchoServer{stream})
}

type StreamingEcho_ClientStreamingEchoServer interface {
	SendAndClose(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type streamingEchoClientStreamingEchoServer struct {
	grpc.ServerStream
}

func (x *streamingEchoClientStreamingEchoServer) SendAndClose(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingEchoClientStreamingEchoServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamingEcho_BidirectionalStreamingEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingEchoServer).BidirectionalStreamingEcho(&streamingEchoBidirectionalStreamingEchoServer{stream})
}

type StreamingEcho_BidirectionalStreamingEchoServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type streamingEchoBidirectionalStreamingEchoServer struct {
	grpc.ServerStream
}

func (x *streamingEchoBidirectionalStreamingEchoServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingEchoBidirectionalStreamingEchoServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamingEcho_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StreamingEcho",
	HandlerType: (*StreamingEchoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingEcho",
			Handler:       _StreamingEcho_ServerStreamingEcho_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingEcho",
			Handler:       _StreamingEcho_ClientStreamingEcho_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingEcho",
			Handler:       _StreamingEcho_BidirectionalStreamingEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/echo.proto",
}
